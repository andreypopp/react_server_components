open! ContainersLabels
open! Monomorphic
open Lwt.Infix
open React_server

module Modifier = struct
  type t = Capitalize | Uppercase

  let of_url_query : t Ppx_deriving_router_runtime.Decode.decode_url_query =
   fun k xs ->
    match List.assoc_opt ~eq:String.equal k xs with
    | None -> Error "not found"
    | Some "capitalize" -> Ok Capitalize
    | Some "uppercase" -> Ok Uppercase
    | Some _ -> Error "invalid value"

  let to_url_query : t Ppx_deriving_router_runtime.Encode.encode_url_query =
   fun k -> function
    | Capitalize -> [ (k, "capitalize") ]
    | Uppercase -> [ (k, "uppercase") ]
end

module Routes = struct
  open Ppx_deriving_router_runtime.Primitives

  type t =
    | Home [@GET "/"]
    | Hello of {
        name : string;
        repeat : int option;
        modifier : Modifier.t option;
      } [@GET "/hello/:name"]
  [@@deriving router]
end

module UI = struct
  let%async_component card ~delay ~title ~children () =
    Lwt_unix.sleep delay >|= fun () ->
    <div>
      <h3>(React.string title)</h3>
      <div>children</div>
      <div>
        "I've been sleeping for "
        (React.stringf "%0.1f sec" delay)
        " before appearing"
      </div>
    </div>

  let%component page ~title ~children () =
    <html>
      <head><title>(React.string title)</title></head>
      <body>
        <h1><span>(React.string title)</span></h1> <div>children</div>
      </body>
    </html>

  let app =
    <page title="React of OCaml">
      <div>
        <card title="Initial Data" delay=0.>
          "This components loads some async data but will block the shell \
           until this data is ready."
          <div>
            <a href=(Routes.href
                       (Hello
                          {
                            modifier = Some Uppercase;
                            name = "world";
                            repeat = None;
                          }))>
              "Go to hello page"
            </a>
          </div>
        </card>
        <React.Suspense fallback=(React.string "...")>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
          <card title="Async Data" delay=1.>(React.string "HELLO")</card>
        </React.Suspense>
        <React.Suspense fallback=(React.string "...")>
          <card title="Async Data" delay=2.>(React.string "OUTER")</card>
          <React.Suspense fallback=(React.string "...")>
            <card title="Inner Async Data" delay=1.>
              (React.string "INNER")
            </card>
          </React.Suspense>
        </React.Suspense>
        <div>
          <h2>(React.string "Testing XSS")</h2>
          <ul>
            <li>"</script><script>console.log(1)</script>"</li>
            <li>"\u{2028}<script>console.log(1)</script>"</li>
          </ul>
        </div>
      </div>
    </page>
end

let render ui = React_dream.render ui

let pages =
  Routes.handle @@ fun route ->
  match route with
  | Home -> render UI.app
  | Hello { name; modifier; repeat } ->
      let name =
        match modifier with
        | Some Capitalize -> String.capitalize_ascii name
        | Some Uppercase -> String.uppercase_ascii name
        | None -> name
      in
      let name =
        match repeat with
        | None -> name
        | Some repeat ->
            List.init repeat ~f:(fun _ -> name) |> String.concat ~sep:", "
      in
      render
        <div>
          <div>"Hello, " (React.string name)</div>
          <div>"Back to " <a href=(Routes.href Home)>"main page"</a></div>
        </div>

let () = Dream.run ~interface:"127.0.0.1" ~port:8080 @@ Dream.logger @@ pages
